type Query {
  students(
    filter: StudentFilter
    sort: [SortOrder!]
    cursor: Int
    pageSize: Int
    direction: PaginationDirection = forward
  ): StudentPage!
  student(id: Int!): Student
}

type Mutation {
  addStudent(name: String!, age: Int!, class_id: String): Student
  updateStudent(id: Int!, name: String, age: Int, class_id: String): Student
  deleteStudent(id: Int!): Boolean
  login(email: String!, password: String!): AuthPayload
}

type Student {
  id: Int!
  name: String!
  age: Int!
  class_id: String
  class: Class
  subjects: [Subject!]
  attendance: [Attendance!]
}

type Class {
  id: String!
  description: String!
}

type Subject {
  id: Int!
  name: String!
}

type Attendance {
  id: Int!
  student_id: Int!
  date: String!
  class_id: String!
  status: String!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  name: String
  email: String
  role: String
}

input IntFilter {
  equals: Int
  not: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
}

input StudentFilter {
  age: IntFilter
  class_id: String
}

input SortOrder {
  field: StudentSortField!
  direction: SortDirection!
}

enum StudentSortField {
  id
  name
  age
  class_id
}

enum SortDirection {
  asc
  desc
}

enum PaginationDirection {
  forward
  backward
}

type StudentPage {
  items: [Student!]!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}
